/*
//===== PHAN 1: LINKED LIST OPERATIONS =====
// 1.1. Them vao dau linked list
void addFirst(String id, int value) {
    Node p=new Node(new Item(id, value));
    if(isEmpty()){
        head=tail=p;
    } else{
        p.next=head;
        head=p;
    }
}

// 1.2. Them vao cuoi linked list
void addLast(String id, int value) {
    Node p=new Node(new Item(id, value));
    if(isEmpty()){
        head=tail=p;
    } else{
	tail.next=p;
	tail=p;
    }
}

// 1.3. Them vao vi tri k
void insertAt(String id, int value, int k){
    if(k < 0) return;
    if(k == 0){
        addFirst(id, value);
        return;
    }
    Node p=head;
    int count=0;
    while(p != null && count < k-1){
        p=p.next;
        count++;
    }
    if(p == null) return;
    Node newNode=new Node(new Item(id, value));
    newNode.next=p.next;
    p.next=newNode;
}

//===== PHAN 2: QUEUE OPERATIONS =====
// 2.1. Them vao queue   // addLast
void enQueue(String id, int value){
    Node p=new Node(new Item(id, value));
    if(isEmpty()){
        front=rear=p;
    } else{
        rear.next=p;
	rear=p;
    }
}

// 2.2. Lay ra khoi queue
Item deQueue(){
    if(isEmpty()) return null;
    Item item=front.info;
    front=front.next;
    if(front == null) rear=null;
    return item;
}
//HCM
 public Car dequeue(){
        Car tmp=front.info;
        front=front.next;
        if(front == null){
            rear=null;
        }
        this.length--;
        return null; //if no book 
    }

//===== PHAN 3: STACK OPERATIONS =====
// 3.1. Them vao stack
void push(String id, int value) {
    Node p=new Node(new Item(id, value));
    if (isEmpty()) {
        head=p;
    } else{
        p.next=head;
        head=p;
    }
}

// 3.2. Lay ra khoi stack
Item pop() {
    if (isEmpty()) return null;
    Item item = top.info;
    top = top.next;
    return item;
}

//===== PHAN 4: BST OPERATIONS =====
*phai tim key

// 4.1. Them vao BST
void insert(Node root, Item item) {
    if (root == null) {
        root = new Node(item);
        return;
    }
    if (item.value < root.info.value) {
        if (root.left == null) root.left = new Node(item);
        else insert(root.left, item);
    } else {
        if (root.right == null) root.right = new Node(item);
        else insert(root.right, item);
    }
}

======BST======
======f1=======
    void insert(String id, String name, double gpa, String major, double balance) {
        // Implement this function - Insert a new student to the BST
        // If the ID already exists, update the student's information
        // --------------------------------------------------------
        TreeNode p=new TreeNode(new Student(id, name, gpa, major, balance));
        if(root == null){
            root=p;
            return;
        }
        TreeNode parent;
        TreeNode current;
        
        current=root;
        parent=null;
        
        while(current != null){
            if(current.info.getId().equals(p.info.getId())){
                current.info.setName(name);
                current.info.setGpa(gpa);
                current.info.setMajor(major);
                current.info.setBalance(balance);
                return;
            }
            parent=current;
            if(p.info.getId().compareTo(current.info.getId()) < 0){
                current=current.left;
            } else{
                current=current.right;
            }
        }
        if(p.info.getId().compareTo(parent.info.getId()) < 0){
            parent.left=p;
        } else{
            parent.right=p;
        }
        // --------------------------------------------------------
    }
========f2=======
    // Find student with highest GPA
    Student findHighestGPA() {
        // Implement this function - Find student with highest GPA
        // --------------------------------------------------------
        // YOUR CODE HERE
        if(root == null){
            return null;
        }
        return findHighestGPA(root);
    }
    private Student findHighestGPA(TreeNode node){
        if(node == null){
            return null;
        }
        // khoi tao sv co gpa cao nhat la sv hien tai
        Student highestGPAStudent=node.info;
        // tim sv co gpa cao nhat o cay ben trai
        Student leftHighest=findHighestGPA(node.left);
        if(leftHighest != null && leftHighest.getGpa() > highestGPAStudent.getGpa()){
            highestGPAStudent=leftHighest;
        }
        // tim sv co gpa cao nhat o cay con ben phai
        Student rightHighest=findHighestGPA(node.right);
        if(rightHighest != null && rightHighest.getGpa() > highestGPAStudent.getGpa()){
            highestGPAStudent=rightHighest;
        }
        return highestGPAStudent;
    }
==============
void f2()
 	Student highestGPA=studentBST.findHighestGPA();
==============

======f3======
    // Count students with GPA greater than or equal to threshold
    int countByGPA(double threshold) {
        // Implement this function - Count students with GPA >= threshold
        // --------------------------------------------------------
         return countByGPA(root, threshold);
    }

    private int countByGPA(TreeNode node, double threshold){
        if(node == null){
            return 0;
        }

        int count=0;
        // kiem tra neu sv hien tai co gpa >= nguong )threshold
        if(node.info.getGpa() >= threshold){
            count=1;
        }
        // de quy dem ca cay con ben trai va phai
        return count + countByGPA(node.left, threshold) + countByGPA(node.right, threshold);
    }
==============
void f3()
	int count=studentBST.countByGPA(3.5);
        f.writeBytes("" + count)
=============

======f4=====
    // Remove a student from scholarship list by ID
    ListNode removeById(String id) {
        // Implement this function - Remove student with given ID from list
        // --------------------------------------------------------
         if(isEmpty()){
            return null;
        }
        // TH xoa node dau tien
        if(head.info.getId().equals(id)){
            ListNode removedNode=head;
            head=head.next;
            if(head == null){
                tail=null;
            }
            return removedNode;
        }

        // tim node can xoa
        ListNode current=head;
        while(current.next != null && !current.next.info.getId().equals(id)){
            current=current.next;
        }
        // neu khong tim thay id
        if(current.next == null){
            return null;
        }
        // luu node can xoa
        ListNode removedNode=current.next;
        // xoa node khoi ds
        current.next=current.next.next;
        // neu node bi xoa la tail, update tail
        if(removedNode == tail){
            tail=current;
        }
        
        return removedNode;
        // --------------------------------------------------------
    }
    // Update student balance in BST
    boolean updateStudentBalance(String id, double amount) {
        // Implement this function - Update balance of student with given ID
        // --------------------------------------------------------
        TreeNode node=search(root, id);
        if(node == null){
            return false;
        }
        // cong them so tien vao tai khoan sinh vien
        node.info.addToBalance(amount);
        return true;
    }
============
void f4()
 while(!scholarshipList.isEmpty()){
            // lay sv dau tien trong ds hoc bong
            ListNode student=scholarshipList.head;
            String studentId=student.info.getId();
            double scholarshipAmount=student.info.getBalance();
            // update so tien trong tai khoan cua sv trong BST
            studentBST.updateStudentBalance(studentId, scholarshipAmount);
            // xoa sv khoi ds hoc bong
            scholarshipList.removeById(studentId);
        }
============

// 4.2. Tim kiem trong BST
Node search(Node root, String id) {
    if (root == null) return null;
    if (root.info.id.equals(id)) return root;
    Node left = search(root.left, id);
    if (left != null) return left;
    return search(root.right, id);
}

//===== PHAN 5: CAC HAM XU LY CHINH =====
// 5.1. Ham xu ly cho Store Management
private int processOrder(Item request) {
    Node p = itemList.head;
    while (p != null) {
        if (p.info.id.equals(request.id)) {
            int processAmount = Math.min(request.amount, p.info.amount);
            if (processAmount > 0) {
                p.info.amount -= processAmount;
                return processAmount * p.info.price;
            }
            break;
        }
        p = p.next;
    }
    return 0;
}

// 5.2. Ham xu ly cho Hotel Booking
private boolean processBooking(Room request) {
    Node p = roomList.head;
    while (p != null) {
        if (p.info.id.equals(request.id) && p.info.status.equals("Available")) {
            p.info.status = "Booked";
            return true;
        }
        p = p.next;
    }
    return false;
}

// Method to rent a room based on the request
void rent(Room t) throws Exception {
    Node current = roomList.head;
    Room tmp = null;
    Room firstValidRoom = null;
    while(current != null) {
        if(current.info.getStatus() == 0) {
            if(current.info.getSize() >= t.getSize()) {
                if(current.info.getPrice() <= t.getPrice()) {
                    if (firstValidRoom == null){
                        firstValidRoom= current.info;
                    }
                    tmp = current.info;
                    break;
                }
            }
        }
        current = current.next;
    }
    
    while(current != null) {
        if(current.info.getStatus() == 0) {
            if(current.info.getSize() >= t.getSize()) {
                if(current.info.getPrice() <= t.getPrice()) {
                    if(current.info.getPrice() < tmp.getPrice()) {
                        tmp = current.info;
                    }
                }
            }
        }
        current = current.next;
    }        
    if(tmp != null) {
        tmp.setStatus(1); 
    }             
}

// 5.3. Ham xu ly cho Moving House
private boolean loadToTruck(Item item) {
    if (currentWeight + item.weight > maxWeight) return false;
    push(item.id, item.weight);
    currentWeight += item.weight;
    return true;
}

// 5.4. Ham xu ly cho Library Management
private boolean borrowBook(Book request) {
    Node book = search(root, request.id);
    if (book != null && book.info.quantity > 0) {
        book.info.quantity--;
        if (book.info.quantity == 0) {
            // Remove from BST
            deleteNode(root, book.info.id);
        }
        return true;
    }
    return false;
}


===STACK===
// 5.5. Ham deleteFirstFragile()
Node deleteFirstFragile(){
    Node result=null;
    //=================
    Node p=head;
    Node prev=null;

    while(p != null){
        if(p.info.getFragile() == 1){
            result=p;
            if(p == head){
	        head=head.next;
            } else if(p == tail){
                tail=prev;
		tail.next=null;
            } else{
		prev.next=p.next;
	    }
            break;
        }
        prevp=p;
	p=p.next;
    }
    //==================
    return result;
}
truck.push(list.deleteFirstFragile());

Node p=list.head;
while(p != null){
    if(p.info.getFragile() == 1){
        truck.push(list.deleteFirstFragile());
    }
    p=p.next;
}
        
Node tmp=truck.head;
while(tmp != null){
    totalWeight+=tmp.info.getWeight();
    tmp=tmp.next;
}
*/